<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>WES Invoice Generator</title>

  <!-- Tailwind -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- jsPDF -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
  
  <style>
    .text-center {
      text-align: center;
    }
    .text-right {
      text-align: right;
    }
    .text-left {
      text-align: left;
    }
    input[type="number"]::-webkit-outer-spin-button,
    input[type="number"]::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    input[type="number"] {
      -moz-appearance: textfield;
    }
    #itemsTable {
      table-layout: fixed;
      width: 100%;
    }
    #itemsTable th:nth-child(1) { width: 5%; }  /* S.No */
    #itemsTable th:nth-child(2) { width: 35%; } /* Description - Increased from 25% */
    #itemsTable th:nth-child(3) { width: 10%; } /* HS Code */
    #itemsTable th:nth-child(4) { width: 12%; } /* Country */
    #itemsTable th:nth-child(5) { width: 8%; }  /* Unit */
    #itemsTable th:nth-child(6) { width: 10%; } /* Unit Rate */
    #itemsTable th:nth-child(7) { width: 8%; }  /* Qty */
    #itemsTable th:nth-child(8) { width: 10%; } /* Discount */
    #itemsTable th:nth-child(9) { width: 12%; } /* Amount */
    #itemsTable th:nth-child(10) { width: 5%; } /* Action */
    
    .remove-btn {
      background: #f87171;
      color: white;
      border: none;
      border-radius: 4px;
      padding: 2px 6px;
      cursor: pointer;
      font-size: 12px;
    }
    .remove-btn:hover {
      background: #ef4444;
    }
  </style>
</head>
<body class="bg-gray-200 font-sans">
<div class="max-w-7xl mx-auto py-8">
  <h1 class="text-3xl font-bold text-center mb-6 text-blue-700">üìÑ Document Generator</h1>

  <div class="grid md:grid-cols-3 gap-6">
    <!-- Sidebar -->
    <div class="bg-gray-900 text-white p-5 rounded-lg space-y-4 shadow-lg">
      <h2 class="text-lg font-semibold mb-2">‚öôÔ∏è Settings</h2>

      <label class="block text-sm">Document Type</label>
      <select id="docType" class="w-full px-2 py-1 rounded text-black">
        <option value="invoice">Commercial Invoice</option>
        <option value="packing">Packing List</option>
        <option value="dn">Delivery Note</option>
      </select>

      <label class="block text-sm">Document No.</label>
      <input id="docNo" class="w-full px-2 py-1 rounded text-black" placeholder="Doc No" />

      <label class="block text-sm">Date</label>
      <input id="docDate" type="date" class="w-full px-2 py-1 rounded text-black" />

      <label class="block text-sm">Currency</label>
      <select id="currency" class="w-full px-2 py-1 rounded text-black">
        <option value="USD">USD - US Dollar</option>
        <option value="SGD">SGD - Singapore Dollar</option>
        <option value="INR">INR - Indian Rupee</option>
      </select>

      <label class="block text-sm">Header Logo</label>
      <input id="headerLogo" type="file" accept="image/*" class="text-sm"/>

      <label class="block text-sm">Stamp</label>
      <input id="stampImg" type="file" accept="image/*" class="text-sm"/>

      <button id="addItemBtn" class="w-full bg-blue-600 py-2 rounded hover:bg-blue-700">‚ûï Add Item</button>
      <button id="clearItemsBtn" class="w-full bg-red-600 py-2 rounded hover:bg-red-700">üóë Clear Items</button>
      <button id="genBtn" class="w-full bg-green-600 py-2 rounded hover:bg-green-700">üìë Generate PDF</button>
    </div>

    <!-- Form -->
    <div class="md:col-span-2 bg-white p-6 rounded-lg shadow-lg space-y-4">
      <h2 class="text-lg font-semibold mb-2 text-gray-700">üìù Details</h2>

      <div class="grid grid-cols-2 gap-2">
        <input id="vesselName" placeholder="Vessel Name" class="px-2 py-1 rounded border"/>
        <input id="imoNumber" placeholder="IMO Number" class="px-2 py-1 rounded border"/>
        <input id="poNumber" placeholder="PO Number" class="px-2 py-1 rounded border"/>
        <input id="wesNumber" placeholder="WES No" class="px-2 py-1 rounded border"/>
        <input id="clientName" placeholder="Client Name" class="px-2 py-1 rounded border"/>
        <input id="packageDetails" placeholder="Package Details" class="px-2 py-1 rounded border"/>
      </div>

      <div class="grid grid-cols-2 gap-2">
        <div>
          <label class="block text-sm mb-1">Invoice To</label>
          <textarea id="invoiceTo" rows="5" class="w-full px-2 py-1 rounded border" placeholder="Invoice To"></textarea>
        </div>
        <div>
          <label class="block text-sm mb-1">Delivery Address</label>
          <textarea id="shipTo" rows="5" class="w-full px-2 py-1 rounded border" placeholder="Delivery Address"></textarea>
        </div>
      </div>

      <div class="overflow-x-auto">
        <table id="itemsTable" class="w-full text-sm mt-3 border border-gray-300">
          <thead class="bg-gray-100">
            <tr>
              <th class="text-center p-1">S.No</th>
              <th class="text-left p-1">Item Description</th>
              <th class="text-center p-1 dn-hide">HS Code</th>
              <th class="text-center p-1 dn-hide">Country of Origin</th>
              <th class="text-center p-1">Unit</th>
              <th class="text-right p-1 invoice-hide">Unit Rate</th>
              <th class="text-center p-1">Qty</th>
              <th class="text-center p-1 invoice-hide">Discount %</th>
              <th class="text-right p-1 invoice-hide">Amount</th>
              <th class="text-center p-1">Action</th>
            </tr>
          </thead>
          <tbody id="itemsBody"></tbody>
        </table>
      </div>

      <div class="text-right font-bold text-lg mt-3 invoice-hide">
        Total: <span id="webTotal">0.00</span>
      </div>
    </div>
  </div>
</div>

<script>
const { jsPDF } = window.jspdf;
function $(id) { return document.getElementById(id); }
function money(v) { return Number(v || 0).toFixed(2); }
$('docDate').valueAsDate = new Date();

let items = [];
function addItem() {
  items.push({ desc: "", hs: "", country: "", unit: "PCE", rate: 0, qty: 1, discount: 0 });
  render();
}

function removeItem(index) {
  items.splice(index, 1);
  render();
}

function clearItems() { items = []; render(); }

function updateColumnVisibility() {
  const docType = $('docType').value;
  const isInvoice = docType === 'invoice';
  const isDN = docType === 'dn';
  
  // Show/hide columns based on document type
  document.querySelectorAll('.dn-hide').forEach(el => {
    el.style.display = isDN ? 'none' : '';
  });
  
  document.querySelectorAll('.invoice-hide').forEach(el => {
    el.style.display = isInvoice ? '' : 'none';
  });
  
  // Update web total visibility
  $('webTotal').parentElement.style.display = isInvoice ? '' : 'none';
}

function render() {
  const body = $('itemsBody'); body.innerHTML = "";
  items.forEach((it, i) => {
    const row = document.createElement("tr");
    row.className = "border-b";
    const amount = it.rate * it.qty * (1 - it.discount / 100);
    row.innerHTML = `
      <td class="text-center p-1">${i + 1}</td>
      <td class="p-1"><input data-i="${i}" data-f="desc" value="${it.desc}" class="w-full border px-1 text-left"/></td>
      <td class="p-1 dn-hide"><input data-i="${i}" data-f="hs" value="${it.hs}" class="w-full border px-1 text-center"/></td>
      <td class="p-1 dn-hide"><input data-i="${i}" data-f="country" value="${it.country}" class="w-full border px-1 text-center"/></td>
      <td class="p-1"><input data-i="${i}" data-f="unit" value="${it.unit}" class="w-full border px-1 text-center"/></td>
      <td class="p-1 invoice-hide"><input data-i="${i}" data-f="rate" type="number" step="0.01" value="${it.rate}" class="w-full border px-1 text-right"/></td>
      <td class="p-1"><input data-i="${i}" data-f="qty" type="number" step="1" value="${it.qty}" class="w-full border px-1 text-center"/></td>
      <td class="p-1 invoice-hide"><input data-i="${i}" data-f="discount" type="number" step="0.01" value="${it.discount}" class="w-full border px-1 text-center"/></td>
      <td class="amount text-right p-1 invoice-hide">${money(amount)}</td>
      <td class="text-center p-1"><button class="remove-btn" data-index="${i}">‚úï</button></td>
    `;
    body.appendChild(row);
  });
  
  body.querySelectorAll("input").forEach(inp => {
    inp.addEventListener("input", () => {
      const i = inp.dataset.i, f = inp.dataset.f;
      items[i][f] = f === "rate" || f === "qty" || f === "discount" ? Number(inp.value) : inp.value;
      updateTotals(); renderAmountsOnly();
    });
  });
  
  // Add event listeners to remove buttons
  body.querySelectorAll(".remove-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      const index = parseInt(btn.getAttribute("data-index"));
      removeItem(index);
    });
  });
  
  updateColumnVisibility();
  updateTotals();
}

function renderAmountsOnly() {
  document.querySelectorAll("#itemsBody tr").forEach((row, i) => {
    if (items[i]) {
      const amount = items[i].rate * items[i].qty * (1 - items[i].discount / 100);
      const amountCell = row.querySelector(".amount");
      if (amountCell) {
        amountCell.textContent = money(amount);
      }
    }
  });
}

function updateTotals() {
  let subtotal = items.reduce((s, it) => s + (it.rate * it.qty * (1 - it.discount / 100)), 0);
  const currencyCode = $('currency').value;
  $("webTotal").textContent = currencyCode + " " + money(subtotal);
}

$('addItemBtn').onclick = addItem;
$('clearItemsBtn').onclick = clearItems;
$('docType').onchange = updateColumnVisibility;
addItem();

function readFile(file) {
  return new Promise(r => {
    if (!file) return r(null);
    const fr = new FileReader();
    fr.onload = () => r(fr.result);
    fr.readAsDataURL(file);
  });
}

function drawReceiverBox(pdf, pageW, pageH, margin, topY) {
  const tableW = pageW - 2 * margin;
  const tableX = margin;
  let yBox = topY;
  pdf.setFontSize(12);
  pdf.setTextColor(0, 0, 0);
  pdf.text("For Receiver", pageW / 2, yBox, { align: "center" });
  yBox += 6;
  pdf.setFontSize(9);
  pdf.setDrawColor(0, 0, 0);
  pdf.rect(tableX, yBox, tableW, 10);
  pdf.text("Receiver to Sign and Stamp as Received, with received date, Name and Signature",
    pageW / 2, yBox + 7, { align: "center" });
  yBox += 10;
  const boxHeight = 40;
  pdf.rect(tableX, yBox, tableW, boxHeight);

  // Draw the horizontal lines for the left section only
  const rows = [yBox + 10, yBox + 20, yBox + 30, yBox + boxHeight];
  for (let r of rows) {
    pdf.line(tableX, r, tableX + tableW * 0.6, r);
  }
  
  // Draw only the vertical line between the two main sections
  const colDividerX = tableX + tableW * 0.6;
  pdf.line(colDividerX, yBox, colDividerX, yBox + boxHeight);
  
  pdf.setFontSize(9);
  pdf.text("Signature of Receiver", tableX + 2, yBox + 7);
  pdf.text("Name of Receiver", tableX + 2, yBox + 17);
  pdf.text("Title of Receiver", tableX + 2, yBox + 27);
  pdf.text("Date Received", tableX + 2, yBox + 37);
  
  // Right section - blank space with centered text and no internal lines
  pdf.setFontSize(11);
  pdf.text("Ship or Company Stamp", colDividerX + (tableW * 0.4)/2, yBox + boxHeight/2, { align: "center" });

  return yBox + boxHeight;
}

$('genBtn').onclick = async () => {
  try {
    const docType = $('docType').value;
    const pdf = new jsPDF();
    const pageW = pdf.internal.pageSize.getWidth();
    const pageH = pdf.internal.pageSize.getHeight();
    const margin = 12;

    const headerLogo = await readFile($('headerLogo').files[0]);
    const stampImg = await readFile($('stampImg').files[0]);
    const currencyCode = $('currency').value;

    // Adjust header position to prevent overlapping
    let headerY = 5;
    if (headerLogo) {
      pdf.addImage(headerLogo, "PNG", margin, headerY, pageW - 2 * margin, 20);
      headerY += 25; // Increase space after logo
    } else {
      headerY = 10;
    }
    
    pdf.setFontSize(9);
    pdf.setTextColor(0, 0, 0);
    pdf.text("GST Registered No: 202018019H.", margin, headerY);
    headerY += 5;

    pdf.setFontSize(14);
    pdf.setTextColor(0, 0, 0);
    const titleY = headerY + 10;
    if (docType === "invoice") pdf.text("COMMERCIAL INVOICE", pageW / 2, titleY, { align: "center" });
    else if (docType === "packing") pdf.text("PACKING LIST", pageW / 2, titleY, { align: "center" });
    else pdf.text("DELIVERY NOTE", pageW / 2, titleY, { align: "center" });

    pdf.setFontSize(10);
    pdf.text(`No: ${$('docNo').value || "DOC-" + Date.now()}`, pageW / 2, titleY + 6, { align: "center" });
    pdf.text(`Date: ${$('docDate').value}`, pageW / 2, titleY + 12, { align: "center" });

    let y = titleY + 20;
    pdf.setDrawColor(0, 0, 0);
    pdf.setTextColor(0, 0, 0);
    
    // Handle package details with text wrapping
    const packageDetails = $('packageDetails').value;
    const packageLines = pdf.splitTextToSize(`PACKAGE DETAILS: ${packageDetails}`, pageW - 2 * margin - 8);
    const detailsBoxHeight = Math.max(36, 6 + (packageLines.length * 5));
    
    pdf.rect(margin, y, pageW - 2 * margin, detailsBoxHeight);
    let boxY = y + 6;
    pdf.text(`VESSEL NAME: ${$('vesselName').value}`, margin + 4, boxY); boxY += 5;
    pdf.text(`IMO NUMBER: ${$('imoNumber').value}`, margin + 4, boxY); boxY += 5;
    pdf.text(`PO NUMBER: ${$('poNumber').value}`, margin + 4, boxY); boxY += 5;
    pdf.text(`WES NO: ${$('wesNumber').value}`, margin + 4, boxY); boxY += 5;
    pdf.text(`CLIENT NAME: ${$('clientName').value}`, margin + 4, boxY); boxY += 5;
    
    // Handle multi-line package details
    packageLines.forEach((line, i) => {
      pdf.text(line, margin + 4, boxY);
      boxY += 5;
    });

    y += detailsBoxHeight + 5;

    const colW = (pageW - 2 * margin) / 2 - 4;
    
    // Improved text handling for addresses with better overflow management
    const invoiceText = $('invoiceTo').value.trim();
    const shipText = $('shipTo').value.trim();
    
    const invoiceLines = pdf.splitTextToSize(invoiceText, colW);
    const shipLines = pdf.splitTextToSize(shipText, colW);
    
    const maxLines = Math.max(invoiceLines.length, shipLines.length);
    const addressBoxHeight = Math.max(36, (maxLines + 1) * 5 + 6);
    
    pdf.rect(margin, y, pageW - 2 * margin, addressBoxHeight);
    pdf.line(margin + colW + 8, y, margin + colW + 8, y + addressBoxHeight);
    pdf.setFontSize(10);
    pdf.text("Invoice To:", margin + 4, y + 5);
    pdf.text("Delivery Address:", margin + colW + 12, y + 5);
    
    invoiceLines.forEach((line, i) => pdf.text(line, margin + 4, y + 11 + i * 5));
    shipLines.forEach((line, i) => pdf.text(line, margin + colW + 12, y + 11 + i * 5));

    y += addressBoxHeight + 5;

    if (docType === "invoice") {
      // Split items into pages with max 7 items per page
      const itemsPerPage = 7;
      const totalPages = Math.ceil(items.length / itemsPerPage);
      
      for (let page = 0; page < totalPages; page++) {
        if (page > 0) {
          pdf.addPage();
          y = margin;
        }
        
        const startIndex = page * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, items.length);
        const pageItems = items.slice(startIndex, endIndex);
        
        const head = [["S.No", "Item Description", "HS Code", "Country of Origin", "Unit", "Unit Rate", "Qty", "Discount %", "Amount"]];
        const body = pageItems.map((it, i) => [
          startIndex + i + 1, 
          it.desc, 
          it.hs, 
          it.country, 
          it.unit, 
          {content: money(it.rate), styles: {halign: 'right'}}, 
          it.qty, 
          it.discount,
          {content: money(it.rate * it.qty * (1 - it.discount / 100)), styles: {halign: 'right'}}
        ]);
        
        const tableOptions = {
          startY: y,
          head,
          body,
          styles: { 
            fontSize: 8, 
            lineColor: [0,0,0], 
            lineWidth: 0.5, 
            textColor: [0,0,0],
            cellPadding: 1.5,
            overflow: 'linebreak'
          },
          headStyles: { 
            fillColor: [200,255,200], 
            textColor: [0,0,0], 
            fontStyle: "bold", 
            halign: 'center',
            cellPadding: 2
          },
          columnStyles: {
            0: {cellWidth: 12, halign: 'center'}, // S.No
            1: {cellWidth: 40, halign: 'left'},   // Item Description
            2: {cellWidth: 20, halign: 'center'}, // HS Code
            3: {cellWidth: 25, halign: 'center'}, // Country of Origin
            4: {cellWidth: 15, halign: 'center'}, // Unit
            5: {cellWidth: 20, halign: 'right'},  // Unit Rate
            6: {cellWidth: 15, halign: 'center'}, // Qty
            7: {cellWidth: 18, halign: 'center'}, // Discount %
            8: {cellWidth: 20, halign: 'right'}   // Amount
          },
          theme: "grid",
          margin: { left: margin, right: margin },
        };
        
        pdf.autoTable(tableOptions);

        let finalY = pdf.lastAutoTable.finalY + 10;
        
        // Only show totals on the last page
        if (page === totalPages - 1) {
          let subtotal = items.reduce((s, it) => s + (it.qty * it.rate * (1 - it.discount / 100)), 0);
          const lastColX = pdf.lastAutoTable.finalX || (pageW - margin);
          
          // Check if we have enough space for totals and stamp
          const totalsHeight = 30;
          if (finalY + totalsHeight > pageH - margin - 20) {
            pdf.addPage();
            finalY = margin;
          }
          
          pdf.setFontSize(10);
          pdf.text(`Subtotal: ${currencyCode} ${money(subtotal)}`, lastColX, finalY, { align: "right" });
          pdf.text(`GST (0%): ${currencyCode} 0.00`, lastColX, finalY + 6, { align: "right" });
          pdf.setFontSize(12);
          pdf.text(`TOTAL: ${currencyCode} ${money(subtotal)}`, lastColX, finalY + 14, { align: "right" });
          finalY += 20;
        }

        // Add footer only on the last page
        if (page === totalPages - 1) {
          // Check if we have enough space for footer
          if (finalY > pageH - margin - 20) {
            pdf.addPage();
            finalY = margin;
          }
          
          pdf.setFontSize(9);
          pdf.setTextColor(0, 0, 0);
          pdf.text("Issued by:", margin, pageH - margin - 20);
          pdf.text("WES Marine Controls Pte Ltd.", margin, pageH - margin - 14);
          pdf.text("This invoice is not for payment", margin, pageH - margin - 4);

          if (stampImg) {
            const stampSize = 25;
            // Ensure stamp doesn't overlap with totals
            const stampY = Math.max(pageH - margin - stampSize, finalY + 10);
            pdf.addImage(stampImg, "PNG", pageW - margin - stampSize, stampY, stampSize, stampSize);
          }
        }
      }
    } else if (docType === "packing") {
      // For packing list
      const itemsPerPage = 7;
      const totalPages = Math.ceil(items.length / itemsPerPage);
      
      for (let page = 0; page < totalPages; page++) {
        if (page > 0) {
          pdf.addPage();
          y = margin;
        }
        
        const startIndex = page * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, items.length);
        const pageItems = items.slice(startIndex, endIndex);
        
        const head = [["S.No", "Item Description", "HS Code", "Country of Origin", "Unit", "Qty"]];
        const body = pageItems.map((it, i) => [
          startIndex + i + 1, 
          {content: it.desc, styles: {halign: 'left'}},
          it.hs, 
          it.country, 
          it.unit, 
          it.qty
        ]);
        
        pdf.autoTable({
          startY: y,
          head,
          body,
          styles: { 
            fontSize: 9, 
            lineColor: [0,0,0], 
            lineWidth: 0.5, 
            textColor: [0,0,0], 
            halign: 'center',
            cellPadding: 1.5
          },
          headStyles: { 
            fillColor: [200,255,200], 
            textColor: [0,0,0], 
            fontStyle: "bold", 
            halign: 'center',
            cellPadding: 2
          },
          columnStyles: {
            1: {halign: 'left', cellWidth: 70} // Item Description left-aligned
          },
          theme: "grid",
          margin: { left: margin, right: margin },
        });
        
        // Only add receiver box on the last page
        if (page === totalPages - 1) {
          const receiverY = pdf.lastAutoTable.finalY + 10;
          // Check if we have enough space for receiver box
          if (receiverY + 60 > pageH) {
            pdf.addPage();
            drawReceiverBox(pdf, pageW, pageH, margin, margin);
          } else {
            drawReceiverBox(pdf, pageW, pageH, margin, receiverY);
          }
        }
      }
    } else {
      // For delivery note - simplified table without HS Code and Country of Origin
      const itemsPerPage = 10; // More items per page since we have fewer columns
      const totalPages = Math.ceil(items.length / itemsPerPage);
      
      for (let page = 0; page < totalPages; page++) {
        if (page > 0) {
          pdf.addPage();
          y = margin;
        }
        
        const startIndex = page * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, items.length);
        const pageItems = items.slice(startIndex, endIndex);
        
        const head = [["S.No", "Item Description", "Unit", "Qty"]];
        const body = pageItems.map((it, i) => [
          startIndex + i + 1, 
          {content: it.desc, styles: {halign: 'left'}},
          it.unit, 
          it.qty
        ]);
        
        pdf.autoTable({
          startY: y,
          head,
          body,
          styles: { 
            fontSize: 10, 
            lineColor: [0,0,0], 
            lineWidth: 0.5, 
            textColor: [0,0,0], 
            halign: 'center',
            cellPadding: 2
          },
          headStyles: { 
            fillColor: [200,255,200], 
            textColor: [0,0,0], 
            fontStyle: "bold", 
            halign: 'center',
            cellPadding: 3
          },
          columnStyles: {
            0: {cellWidth: 15, halign: 'center'}, // S.No
            1: {cellWidth: 'auto', halign: 'left'}, // Item Description (takes remaining space)
            2: {cellWidth: 25, halign: 'center'}, // Unit
            3: {cellWidth: 25, halign: 'center'}  // Qty
          },
          theme: "grid",
          margin: { left: margin, right: margin },
        });
        
        // Only add receiver box on the last page
        if (page === totalPages - 1) {
          const receiverY = pdf.lastAutoTable.finalY + 10;
          // Check if we have enough space for receiver box
          if (receiverY + 60 > pageH) {
            pdf.addPage();
            drawReceiverBox(pdf, pageW, pageH, margin, margin);
          } else {
            drawReceiverBox(pdf, pageW, pageH, margin, receiverY);
          }
        }
      }
    }

    pdf.save((docType === "invoice" ? "commercial_invoice" :
             docType === "packing" ? "packing_list" : "delivery_note") + ".pdf");

  } catch (e) {
    console.error(e);
    alert("Error generating PDF");
  }
};
</script>
</body>
</html>
